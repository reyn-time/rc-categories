// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/patient/v1/patient.proto (package patient.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum patient.v1.Gender
 */
export enum Gender {
  /**
   * @generated from enum value: Male = 0;
   */
  Male = 0,

  /**
   * @generated from enum value: Female = 1;
   */
  Female = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Gender)
proto3.util.setEnumType(Gender, "patient.v1.Gender", [
  { no: 0, name: "Male" },
  { no: 1, name: "Female" },
]);

/**
 * @generated from enum patient.v1.PatientStatus
 */
export enum PatientStatus {
  /**
   * @generated from enum value: Active = 0;
   */
  Active = 0,

  /**
   * @generated from enum value: OnHold = 1;
   */
  OnHold = 1,

  /**
   * @generated from enum value: Blacklisted = 2;
   */
  Blacklisted = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PatientStatus)
proto3.util.setEnumType(PatientStatus, "patient.v1.PatientStatus", [
  { no: 0, name: "Active" },
  { no: 1, name: "OnHold" },
  { no: 2, name: "Blacklisted" },
]);

/**
 * @generated from message patient.v1.ListPatientRequest
 */
export class ListPatientRequest extends Message<ListPatientRequest> {
  constructor(data?: PartialMessage<ListPatientRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patient.v1.ListPatientRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPatientRequest {
    return new ListPatientRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPatientRequest {
    return new ListPatientRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPatientRequest {
    return new ListPatientRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPatientRequest | PlainMessage<ListPatientRequest> | undefined, b: ListPatientRequest | PlainMessage<ListPatientRequest> | undefined): boolean {
    return proto3.util.equals(ListPatientRequest, a, b);
  }
}

/**
 * @generated from message patient.v1.ListPatientResponse
 */
export class ListPatientResponse extends Message<ListPatientResponse> {
  /**
   * @generated from field: repeated patient.v1.Patient patients = 1;
   */
  patients: Patient[] = [];

  constructor(data?: PartialMessage<ListPatientResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patient.v1.ListPatientResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "patients", kind: "message", T: Patient, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPatientResponse {
    return new ListPatientResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPatientResponse {
    return new ListPatientResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPatientResponse {
    return new ListPatientResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPatientResponse | PlainMessage<ListPatientResponse> | undefined, b: ListPatientResponse | PlainMessage<ListPatientResponse> | undefined): boolean {
    return proto3.util.equals(ListPatientResponse, a, b);
  }
}

/**
 * @generated from message patient.v1.CreatePatientRequest
 */
export class CreatePatientRequest extends Message<CreatePatientRequest> {
  /**
   * @generated from field: string initials = 1;
   */
  initials = "";

  /**
   * @generated from field: patient.v1.Gender gender = 2;
   */
  gender = Gender.Male;

  constructor(data?: PartialMessage<CreatePatientRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patient.v1.CreatePatientRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "initials", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gender", kind: "enum", T: proto3.getEnumType(Gender) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePatientRequest {
    return new CreatePatientRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePatientRequest {
    return new CreatePatientRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePatientRequest {
    return new CreatePatientRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePatientRequest | PlainMessage<CreatePatientRequest> | undefined, b: CreatePatientRequest | PlainMessage<CreatePatientRequest> | undefined): boolean {
    return proto3.util.equals(CreatePatientRequest, a, b);
  }
}

/**
 * @generated from message patient.v1.CreatePatientResponse
 */
export class CreatePatientResponse extends Message<CreatePatientResponse> {
  constructor(data?: PartialMessage<CreatePatientResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patient.v1.CreatePatientResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePatientResponse {
    return new CreatePatientResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePatientResponse {
    return new CreatePatientResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePatientResponse {
    return new CreatePatientResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePatientResponse | PlainMessage<CreatePatientResponse> | undefined, b: CreatePatientResponse | PlainMessage<CreatePatientResponse> | undefined): boolean {
    return proto3.util.equals(CreatePatientResponse, a, b);
  }
}

/**
 * @generated from message patient.v1.ChangePatientStatusRequest
 */
export class ChangePatientStatusRequest extends Message<ChangePatientStatusRequest> {
  /**
   * @generated from field: int32 patient_id = 1;
   */
  patientId = 0;

  /**
   * @generated from field: patient.v1.PatientStatus status = 2;
   */
  status = PatientStatus.Active;

  constructor(data?: PartialMessage<ChangePatientStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patient.v1.ChangePatientStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "patient_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(PatientStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangePatientStatusRequest {
    return new ChangePatientStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangePatientStatusRequest {
    return new ChangePatientStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangePatientStatusRequest {
    return new ChangePatientStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangePatientStatusRequest | PlainMessage<ChangePatientStatusRequest> | undefined, b: ChangePatientStatusRequest | PlainMessage<ChangePatientStatusRequest> | undefined): boolean {
    return proto3.util.equals(ChangePatientStatusRequest, a, b);
  }
}

/**
 * @generated from message patient.v1.ChangePatientStatusResponse
 */
export class ChangePatientStatusResponse extends Message<ChangePatientStatusResponse> {
  constructor(data?: PartialMessage<ChangePatientStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patient.v1.ChangePatientStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangePatientStatusResponse {
    return new ChangePatientStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangePatientStatusResponse {
    return new ChangePatientStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangePatientStatusResponse {
    return new ChangePatientStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangePatientStatusResponse | PlainMessage<ChangePatientStatusResponse> | undefined, b: ChangePatientStatusResponse | PlainMessage<ChangePatientStatusResponse> | undefined): boolean {
    return proto3.util.equals(ChangePatientStatusResponse, a, b);
  }
}

/**
 * @generated from message patient.v1.Patient
 */
export class Patient extends Message<Patient> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string initials = 2;
   */
  initials = "";

  /**
   * @generated from field: patient.v1.Gender gender = 3;
   */
  gender = Gender.Male;

  /**
   * @generated from field: patient.v1.PatientStatus status = 4;
   */
  status = PatientStatus.Active;

  constructor(data?: PartialMessage<Patient>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patient.v1.Patient";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "initials", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gender", kind: "enum", T: proto3.getEnumType(Gender) },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(PatientStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Patient {
    return new Patient().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Patient {
    return new Patient().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Patient {
    return new Patient().fromJsonString(jsonString, options);
  }

  static equals(a: Patient | PlainMessage<Patient> | undefined, b: Patient | PlainMessage<Patient> | undefined): boolean {
    return proto3.util.equals(Patient, a, b);
  }
}

