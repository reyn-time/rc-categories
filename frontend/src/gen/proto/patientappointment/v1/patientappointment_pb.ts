// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/patientappointment/v1/patientappointment.proto (package patientappointment.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, Timestamp, proto3 } from "@bufbuild/protobuf";
import { User } from "../../user/v1/user_pb.js";

/**
 * @generated from message patientappointment.v1.ListCurrentPatientAppointmentRequest
 */
export class ListCurrentPatientAppointmentRequest extends Message<ListCurrentPatientAppointmentRequest> {
  constructor(data?: PartialMessage<ListCurrentPatientAppointmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.ListCurrentPatientAppointmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCurrentPatientAppointmentRequest {
    return new ListCurrentPatientAppointmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCurrentPatientAppointmentRequest {
    return new ListCurrentPatientAppointmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCurrentPatientAppointmentRequest {
    return new ListCurrentPatientAppointmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCurrentPatientAppointmentRequest | PlainMessage<ListCurrentPatientAppointmentRequest> | undefined, b: ListCurrentPatientAppointmentRequest | PlainMessage<ListCurrentPatientAppointmentRequest> | undefined): boolean {
    return proto3.util.equals(ListCurrentPatientAppointmentRequest, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.ListCurrentPatientAppointmentResponse
 */
export class ListCurrentPatientAppointmentResponse extends Message<ListCurrentPatientAppointmentResponse> {
  /**
   * @generated from field: repeated patientappointment.v1.PatientAppointment appointments = 1;
   */
  appointments: PatientAppointment[] = [];

  constructor(data?: PartialMessage<ListCurrentPatientAppointmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.ListCurrentPatientAppointmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appointments", kind: "message", T: PatientAppointment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCurrentPatientAppointmentResponse {
    return new ListCurrentPatientAppointmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCurrentPatientAppointmentResponse {
    return new ListCurrentPatientAppointmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCurrentPatientAppointmentResponse {
    return new ListCurrentPatientAppointmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCurrentPatientAppointmentResponse | PlainMessage<ListCurrentPatientAppointmentResponse> | undefined, b: ListCurrentPatientAppointmentResponse | PlainMessage<ListCurrentPatientAppointmentResponse> | undefined): boolean {
    return proto3.util.equals(ListCurrentPatientAppointmentResponse, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.JoinPatientAppointmentRequest
 */
export class JoinPatientAppointmentRequest extends Message<JoinPatientAppointmentRequest> {
  /**
   * @generated from field: int32 appointment_id = 1;
   */
  appointmentId = 0;

  /**
   * @generated from field: int32 user_id = 2;
   */
  userId = 0;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<JoinPatientAppointmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.JoinPatientAppointmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appointment_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinPatientAppointmentRequest {
    return new JoinPatientAppointmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinPatientAppointmentRequest {
    return new JoinPatientAppointmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinPatientAppointmentRequest {
    return new JoinPatientAppointmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JoinPatientAppointmentRequest | PlainMessage<JoinPatientAppointmentRequest> | undefined, b: JoinPatientAppointmentRequest | PlainMessage<JoinPatientAppointmentRequest> | undefined): boolean {
    return proto3.util.equals(JoinPatientAppointmentRequest, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.JoinPatientAppointmentResponse
 */
export class JoinPatientAppointmentResponse extends Message<JoinPatientAppointmentResponse> {
  constructor(data?: PartialMessage<JoinPatientAppointmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.JoinPatientAppointmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinPatientAppointmentResponse {
    return new JoinPatientAppointmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinPatientAppointmentResponse {
    return new JoinPatientAppointmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinPatientAppointmentResponse {
    return new JoinPatientAppointmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JoinPatientAppointmentResponse | PlainMessage<JoinPatientAppointmentResponse> | undefined, b: JoinPatientAppointmentResponse | PlainMessage<JoinPatientAppointmentResponse> | undefined): boolean {
    return proto3.util.equals(JoinPatientAppointmentResponse, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.QuitPatientAppointmentRequest
 */
export class QuitPatientAppointmentRequest extends Message<QuitPatientAppointmentRequest> {
  /**
   * @generated from field: int32 appointment_id = 1;
   */
  appointmentId = 0;

  /**
   * @generated from field: int32 user_id = 2;
   */
  userId = 0;

  constructor(data?: PartialMessage<QuitPatientAppointmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.QuitPatientAppointmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appointment_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuitPatientAppointmentRequest {
    return new QuitPatientAppointmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuitPatientAppointmentRequest {
    return new QuitPatientAppointmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuitPatientAppointmentRequest {
    return new QuitPatientAppointmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuitPatientAppointmentRequest | PlainMessage<QuitPatientAppointmentRequest> | undefined, b: QuitPatientAppointmentRequest | PlainMessage<QuitPatientAppointmentRequest> | undefined): boolean {
    return proto3.util.equals(QuitPatientAppointmentRequest, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.QuitPatientAppointmentResponse
 */
export class QuitPatientAppointmentResponse extends Message<QuitPatientAppointmentResponse> {
  constructor(data?: PartialMessage<QuitPatientAppointmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.QuitPatientAppointmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuitPatientAppointmentResponse {
    return new QuitPatientAppointmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuitPatientAppointmentResponse {
    return new QuitPatientAppointmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuitPatientAppointmentResponse {
    return new QuitPatientAppointmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuitPatientAppointmentResponse | PlainMessage<QuitPatientAppointmentResponse> | undefined, b: QuitPatientAppointmentResponse | PlainMessage<QuitPatientAppointmentResponse> | undefined): boolean {
    return proto3.util.equals(QuitPatientAppointmentResponse, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.CreatePatientAppointmentRequest
 */
export class CreatePatientAppointmentRequest extends Message<CreatePatientAppointmentRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: int32 patient_id = 2;
   */
  patientId = 0;

  constructor(data?: PartialMessage<CreatePatientAppointmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.CreatePatientAppointmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_time", kind: "message", T: Timestamp },
    { no: 2, name: "patient_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePatientAppointmentRequest {
    return new CreatePatientAppointmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePatientAppointmentRequest {
    return new CreatePatientAppointmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePatientAppointmentRequest {
    return new CreatePatientAppointmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePatientAppointmentRequest | PlainMessage<CreatePatientAppointmentRequest> | undefined, b: CreatePatientAppointmentRequest | PlainMessage<CreatePatientAppointmentRequest> | undefined): boolean {
    return proto3.util.equals(CreatePatientAppointmentRequest, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.CreatePatientAppointmentResponse
 */
export class CreatePatientAppointmentResponse extends Message<CreatePatientAppointmentResponse> {
  constructor(data?: PartialMessage<CreatePatientAppointmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.CreatePatientAppointmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePatientAppointmentResponse {
    return new CreatePatientAppointmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePatientAppointmentResponse {
    return new CreatePatientAppointmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePatientAppointmentResponse {
    return new CreatePatientAppointmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePatientAppointmentResponse | PlainMessage<CreatePatientAppointmentResponse> | undefined, b: CreatePatientAppointmentResponse | PlainMessage<CreatePatientAppointmentResponse> | undefined): boolean {
    return proto3.util.equals(CreatePatientAppointmentResponse, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.UpdatePatientAppointmentRequest
 */
export class UpdatePatientAppointmentRequest extends Message<UpdatePatientAppointmentRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  constructor(data?: PartialMessage<UpdatePatientAppointmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.UpdatePatientAppointmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "start_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePatientAppointmentRequest {
    return new UpdatePatientAppointmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePatientAppointmentRequest {
    return new UpdatePatientAppointmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePatientAppointmentRequest {
    return new UpdatePatientAppointmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePatientAppointmentRequest | PlainMessage<UpdatePatientAppointmentRequest> | undefined, b: UpdatePatientAppointmentRequest | PlainMessage<UpdatePatientAppointmentRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePatientAppointmentRequest, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.UpdatePatientAppointmentResponse
 */
export class UpdatePatientAppointmentResponse extends Message<UpdatePatientAppointmentResponse> {
  constructor(data?: PartialMessage<UpdatePatientAppointmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.UpdatePatientAppointmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePatientAppointmentResponse {
    return new UpdatePatientAppointmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePatientAppointmentResponse {
    return new UpdatePatientAppointmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePatientAppointmentResponse {
    return new UpdatePatientAppointmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePatientAppointmentResponse | PlainMessage<UpdatePatientAppointmentResponse> | undefined, b: UpdatePatientAppointmentResponse | PlainMessage<UpdatePatientAppointmentResponse> | undefined): boolean {
    return proto3.util.equals(UpdatePatientAppointmentResponse, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.DeletePatientAppointmentRequest
 */
export class DeletePatientAppointmentRequest extends Message<DeletePatientAppointmentRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeletePatientAppointmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.DeletePatientAppointmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePatientAppointmentRequest {
    return new DeletePatientAppointmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePatientAppointmentRequest {
    return new DeletePatientAppointmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePatientAppointmentRequest {
    return new DeletePatientAppointmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePatientAppointmentRequest | PlainMessage<DeletePatientAppointmentRequest> | undefined, b: DeletePatientAppointmentRequest | PlainMessage<DeletePatientAppointmentRequest> | undefined): boolean {
    return proto3.util.equals(DeletePatientAppointmentRequest, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.DeletePatientAppointmentResponse
 */
export class DeletePatientAppointmentResponse extends Message<DeletePatientAppointmentResponse> {
  constructor(data?: PartialMessage<DeletePatientAppointmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.DeletePatientAppointmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePatientAppointmentResponse {
    return new DeletePatientAppointmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePatientAppointmentResponse {
    return new DeletePatientAppointmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePatientAppointmentResponse {
    return new DeletePatientAppointmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePatientAppointmentResponse | PlainMessage<DeletePatientAppointmentResponse> | undefined, b: DeletePatientAppointmentResponse | PlainMessage<DeletePatientAppointmentResponse> | undefined): boolean {
    return proto3.util.equals(DeletePatientAppointmentResponse, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.ListSignedUpUsersForAppointmentRequest
 */
export class ListSignedUpUsersForAppointmentRequest extends Message<ListSignedUpUsersForAppointmentRequest> {
  /**
   * @generated from field: int32 appointment_id = 1;
   */
  appointmentId = 0;

  constructor(data?: PartialMessage<ListSignedUpUsersForAppointmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.ListSignedUpUsersForAppointmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appointment_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSignedUpUsersForAppointmentRequest {
    return new ListSignedUpUsersForAppointmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSignedUpUsersForAppointmentRequest {
    return new ListSignedUpUsersForAppointmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSignedUpUsersForAppointmentRequest {
    return new ListSignedUpUsersForAppointmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSignedUpUsersForAppointmentRequest | PlainMessage<ListSignedUpUsersForAppointmentRequest> | undefined, b: ListSignedUpUsersForAppointmentRequest | PlainMessage<ListSignedUpUsersForAppointmentRequest> | undefined): boolean {
    return proto3.util.equals(ListSignedUpUsersForAppointmentRequest, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.ListSignedUpUsersForAppointmentResponse
 */
export class ListSignedUpUsersForAppointmentResponse extends Message<ListSignedUpUsersForAppointmentResponse> {
  /**
   * @generated from field: repeated user.v1.User user = 1;
   */
  user: User[] = [];

  constructor(data?: PartialMessage<ListSignedUpUsersForAppointmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.ListSignedUpUsersForAppointmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSignedUpUsersForAppointmentResponse {
    return new ListSignedUpUsersForAppointmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSignedUpUsersForAppointmentResponse {
    return new ListSignedUpUsersForAppointmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSignedUpUsersForAppointmentResponse {
    return new ListSignedUpUsersForAppointmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSignedUpUsersForAppointmentResponse | PlainMessage<ListSignedUpUsersForAppointmentResponse> | undefined, b: ListSignedUpUsersForAppointmentResponse | PlainMessage<ListSignedUpUsersForAppointmentResponse> | undefined): boolean {
    return proto3.util.equals(ListSignedUpUsersForAppointmentResponse, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.PatientAppointment
 */
export class PatientAppointment extends Message<PatientAppointment> {
  /**
   * @generated from field: int32 id = 3;
   */
  id = 0;

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: int32 meeting_number = 4;
   */
  meetingNumber = 0;

  /**
   * @generated from field: int32 patient_id = 2;
   */
  patientId = 0;

  /**
   * @generated from field: bool is_user_signed_up = 5;
   */
  isUserSignedUp = false;

  /**
   * @generated from field: repeated int32 signed_up_user_ids = 6;
   */
  signedUpUserIds: number[] = [];

  constructor(data?: PartialMessage<PatientAppointment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.PatientAppointment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 1, name: "start_time", kind: "message", T: Timestamp },
    { no: 4, name: "meeting_number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "patient_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "is_user_signed_up", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "signed_up_user_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientAppointment {
    return new PatientAppointment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientAppointment {
    return new PatientAppointment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientAppointment {
    return new PatientAppointment().fromJsonString(jsonString, options);
  }

  static equals(a: PatientAppointment | PlainMessage<PatientAppointment> | undefined, b: PatientAppointment | PlainMessage<PatientAppointment> | undefined): boolean {
    return proto3.util.equals(PatientAppointment, a, b);
  }
}

