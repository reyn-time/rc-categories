// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/patientappointment/v1/patientappointment.proto (package patientappointment.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, Timestamp, proto3 } from "@bufbuild/protobuf";
import { Patient } from "../../patient/v1/patient_pb.js";

/**
 * @generated from message patientappointment.v1.ListCurrentPatientAppointmentRequest
 */
export class ListCurrentPatientAppointmentRequest extends Message<ListCurrentPatientAppointmentRequest> {
  constructor(data?: PartialMessage<ListCurrentPatientAppointmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.ListCurrentPatientAppointmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCurrentPatientAppointmentRequest {
    return new ListCurrentPatientAppointmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCurrentPatientAppointmentRequest {
    return new ListCurrentPatientAppointmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCurrentPatientAppointmentRequest {
    return new ListCurrentPatientAppointmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCurrentPatientAppointmentRequest | PlainMessage<ListCurrentPatientAppointmentRequest> | undefined, b: ListCurrentPatientAppointmentRequest | PlainMessage<ListCurrentPatientAppointmentRequest> | undefined): boolean {
    return proto3.util.equals(ListCurrentPatientAppointmentRequest, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.ListCurrentPatientAppointmentResponse
 */
export class ListCurrentPatientAppointmentResponse extends Message<ListCurrentPatientAppointmentResponse> {
  /**
   * @generated from field: repeated patientappointment.v1.PatientAppointment appointments = 1;
   */
  appointments: PatientAppointment[] = [];

  constructor(data?: PartialMessage<ListCurrentPatientAppointmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.ListCurrentPatientAppointmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "appointments", kind: "message", T: PatientAppointment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCurrentPatientAppointmentResponse {
    return new ListCurrentPatientAppointmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCurrentPatientAppointmentResponse {
    return new ListCurrentPatientAppointmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCurrentPatientAppointmentResponse {
    return new ListCurrentPatientAppointmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCurrentPatientAppointmentResponse | PlainMessage<ListCurrentPatientAppointmentResponse> | undefined, b: ListCurrentPatientAppointmentResponse | PlainMessage<ListCurrentPatientAppointmentResponse> | undefined): boolean {
    return proto3.util.equals(ListCurrentPatientAppointmentResponse, a, b);
  }
}

/**
 * @generated from message patientappointment.v1.PatientAppointment
 */
export class PatientAppointment extends Message<PatientAppointment> {
  /**
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: patient.v1.Patient patient = 2;
   */
  patient?: Patient;

  constructor(data?: PartialMessage<PatientAppointment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "patientappointment.v1.PatientAppointment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_time", kind: "message", T: Timestamp },
    { no: 2, name: "patient", kind: "message", T: Patient },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientAppointment {
    return new PatientAppointment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientAppointment {
    return new PatientAppointment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientAppointment {
    return new PatientAppointment().fromJsonString(jsonString, options);
  }

  static equals(a: PatientAppointment | PlainMessage<PatientAppointment> | undefined, b: PatientAppointment | PlainMessage<PatientAppointment> | undefined): boolean {
    return proto3.util.equals(PatientAppointment, a, b);
  }
}

