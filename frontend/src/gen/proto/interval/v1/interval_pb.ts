// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file proto/interval/v1/interval.proto (package interval.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message interval.v1.PostIntervalRequest
 */
export class PostIntervalRequest extends Message<PostIntervalRequest> {
  /**
   * @generated from field: interval.v1.Interval interval = 1;
   */
  interval?: Interval;

  constructor(data?: PartialMessage<PostIntervalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "interval.v1.PostIntervalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interval", kind: "message", T: Interval },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostIntervalRequest {
    return new PostIntervalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostIntervalRequest {
    return new PostIntervalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostIntervalRequest {
    return new PostIntervalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostIntervalRequest | PlainMessage<PostIntervalRequest> | undefined, b: PostIntervalRequest | PlainMessage<PostIntervalRequest> | undefined): boolean {
    return proto3.util.equals(PostIntervalRequest, a, b);
  }
}

/**
 * @generated from message interval.v1.PostIntervalResponse
 */
export class PostIntervalResponse extends Message<PostIntervalResponse> {
  constructor(data?: PartialMessage<PostIntervalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "interval.v1.PostIntervalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostIntervalResponse {
    return new PostIntervalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostIntervalResponse {
    return new PostIntervalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostIntervalResponse {
    return new PostIntervalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostIntervalResponse | PlainMessage<PostIntervalResponse> | undefined, b: PostIntervalResponse | PlainMessage<PostIntervalResponse> | undefined): boolean {
    return proto3.util.equals(PostIntervalResponse, a, b);
  }
}

/**
 * @generated from message interval.v1.ListIntervalRequest
 */
export class ListIntervalRequest extends Message<ListIntervalRequest> {
  /**
   * @generated from field: int32 video_id = 1;
   */
  videoId = 0;

  constructor(data?: PartialMessage<ListIntervalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "interval.v1.ListIntervalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "video_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIntervalRequest {
    return new ListIntervalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIntervalRequest {
    return new ListIntervalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIntervalRequest {
    return new ListIntervalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListIntervalRequest | PlainMessage<ListIntervalRequest> | undefined, b: ListIntervalRequest | PlainMessage<ListIntervalRequest> | undefined): boolean {
    return proto3.util.equals(ListIntervalRequest, a, b);
  }
}

/**
 * @generated from message interval.v1.ListIntervalResponse
 */
export class ListIntervalResponse extends Message<ListIntervalResponse> {
  /**
   * @generated from field: repeated interval.v1.Interval intervals = 1;
   */
  intervals: Interval[] = [];

  constructor(data?: PartialMessage<ListIntervalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "interval.v1.ListIntervalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "intervals", kind: "message", T: Interval, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIntervalResponse {
    return new ListIntervalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIntervalResponse {
    return new ListIntervalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIntervalResponse {
    return new ListIntervalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListIntervalResponse | PlainMessage<ListIntervalResponse> | undefined, b: ListIntervalResponse | PlainMessage<ListIntervalResponse> | undefined): boolean {
    return proto3.util.equals(ListIntervalResponse, a, b);
  }
}

/**
 * @generated from message interval.v1.UpdateIntervalRequest
 */
export class UpdateIntervalRequest extends Message<UpdateIntervalRequest> {
  /**
   * @generated from field: interval.v1.Interval interval = 1;
   */
  interval?: Interval;

  constructor(data?: PartialMessage<UpdateIntervalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "interval.v1.UpdateIntervalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interval", kind: "message", T: Interval },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIntervalRequest {
    return new UpdateIntervalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIntervalRequest {
    return new UpdateIntervalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIntervalRequest {
    return new UpdateIntervalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIntervalRequest | PlainMessage<UpdateIntervalRequest> | undefined, b: UpdateIntervalRequest | PlainMessage<UpdateIntervalRequest> | undefined): boolean {
    return proto3.util.equals(UpdateIntervalRequest, a, b);
  }
}

/**
 * @generated from message interval.v1.UpdateIntervalResponse
 */
export class UpdateIntervalResponse extends Message<UpdateIntervalResponse> {
  constructor(data?: PartialMessage<UpdateIntervalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "interval.v1.UpdateIntervalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIntervalResponse {
    return new UpdateIntervalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIntervalResponse {
    return new UpdateIntervalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIntervalResponse {
    return new UpdateIntervalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIntervalResponse | PlainMessage<UpdateIntervalResponse> | undefined, b: UpdateIntervalResponse | PlainMessage<UpdateIntervalResponse> | undefined): boolean {
    return proto3.util.equals(UpdateIntervalResponse, a, b);
  }
}

/**
 * @generated from message interval.v1.DeleteIntervalRequest
 */
export class DeleteIntervalRequest extends Message<DeleteIntervalRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeleteIntervalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "interval.v1.DeleteIntervalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIntervalRequest {
    return new DeleteIntervalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIntervalRequest {
    return new DeleteIntervalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIntervalRequest {
    return new DeleteIntervalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIntervalRequest | PlainMessage<DeleteIntervalRequest> | undefined, b: DeleteIntervalRequest | PlainMessage<DeleteIntervalRequest> | undefined): boolean {
    return proto3.util.equals(DeleteIntervalRequest, a, b);
  }
}

/**
 * @generated from message interval.v1.DeleteIntervalResponse
 */
export class DeleteIntervalResponse extends Message<DeleteIntervalResponse> {
  constructor(data?: PartialMessage<DeleteIntervalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "interval.v1.DeleteIntervalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIntervalResponse {
    return new DeleteIntervalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIntervalResponse {
    return new DeleteIntervalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIntervalResponse {
    return new DeleteIntervalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIntervalResponse | PlainMessage<DeleteIntervalResponse> | undefined, b: DeleteIntervalResponse | PlainMessage<DeleteIntervalResponse> | undefined): boolean {
    return proto3.util.equals(DeleteIntervalResponse, a, b);
  }
}

/**
 * @generated from message interval.v1.Interval
 */
export class Interval extends Message<Interval> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 video_id = 2;
   */
  videoId = 0;

  /**
   * @generated from field: float start_time = 3;
   */
  startTime = 0;

  /**
   * @generated from field: float end_time = 4;
   */
  endTime = 0;

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: repeated int32 category_ids = 6;
   */
  categoryIds: number[] = [];

  constructor(data?: PartialMessage<Interval>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "interval.v1.Interval";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "video_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "start_time", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "end_time", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "category_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Interval {
    return new Interval().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Interval {
    return new Interval().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Interval {
    return new Interval().fromJsonString(jsonString, options);
  }

  static equals(a: Interval | PlainMessage<Interval> | undefined, b: Interval | PlainMessage<Interval> | undefined): boolean {
    return proto3.util.equals(Interval, a, b);
  }
}

