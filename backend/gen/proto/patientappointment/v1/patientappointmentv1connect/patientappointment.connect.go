// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/patientappointment/v1/patientappointment.proto

package patientappointmentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/reyn-time/rc-categories/backend/gen/proto/patientappointment/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PatientAppointmentServiceName is the fully-qualified name of the PatientAppointmentService
	// service.
	PatientAppointmentServiceName = "patientappointment.v1.PatientAppointmentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PatientAppointmentServiceListCurrentPatientAppointmentProcedure is the fully-qualified name of
	// the PatientAppointmentService's ListCurrentPatientAppointment RPC.
	PatientAppointmentServiceListCurrentPatientAppointmentProcedure = "/patientappointment.v1.PatientAppointmentService/ListCurrentPatientAppointment"
	// PatientAppointmentServiceCreatePatientAppointmentProcedure is the fully-qualified name of the
	// PatientAppointmentService's CreatePatientAppointment RPC.
	PatientAppointmentServiceCreatePatientAppointmentProcedure = "/patientappointment.v1.PatientAppointmentService/CreatePatientAppointment"
	// PatientAppointmentServiceUpdatePatientAppointmentProcedure is the fully-qualified name of the
	// PatientAppointmentService's UpdatePatientAppointment RPC.
	PatientAppointmentServiceUpdatePatientAppointmentProcedure = "/patientappointment.v1.PatientAppointmentService/UpdatePatientAppointment"
	// PatientAppointmentServiceDeletePatientAppointmentProcedure is the fully-qualified name of the
	// PatientAppointmentService's DeletePatientAppointment RPC.
	PatientAppointmentServiceDeletePatientAppointmentProcedure = "/patientappointment.v1.PatientAppointmentService/DeletePatientAppointment"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	patientAppointmentServiceServiceDescriptor                             = v1.File_proto_patientappointment_v1_patientappointment_proto.Services().ByName("PatientAppointmentService")
	patientAppointmentServiceListCurrentPatientAppointmentMethodDescriptor = patientAppointmentServiceServiceDescriptor.Methods().ByName("ListCurrentPatientAppointment")
	patientAppointmentServiceCreatePatientAppointmentMethodDescriptor      = patientAppointmentServiceServiceDescriptor.Methods().ByName("CreatePatientAppointment")
	patientAppointmentServiceUpdatePatientAppointmentMethodDescriptor      = patientAppointmentServiceServiceDescriptor.Methods().ByName("UpdatePatientAppointment")
	patientAppointmentServiceDeletePatientAppointmentMethodDescriptor      = patientAppointmentServiceServiceDescriptor.Methods().ByName("DeletePatientAppointment")
)

// PatientAppointmentServiceClient is a client for the
// patientappointment.v1.PatientAppointmentService service.
type PatientAppointmentServiceClient interface {
	ListCurrentPatientAppointment(context.Context, *connect.Request[v1.ListCurrentPatientAppointmentRequest]) (*connect.Response[v1.ListCurrentPatientAppointmentResponse], error)
	// TODO: Allow users to sign up to, or cancel appointments.
	CreatePatientAppointment(context.Context, *connect.Request[v1.CreatePatientAppointmentRequest]) (*connect.Response[v1.CreatePatientAppointmentResponse], error)
	UpdatePatientAppointment(context.Context, *connect.Request[v1.UpdatePatientAppointmentRequest]) (*connect.Response[v1.UpdatePatientAppointmentResponse], error)
	DeletePatientAppointment(context.Context, *connect.Request[v1.DeletePatientAppointmentRequest]) (*connect.Response[v1.DeletePatientAppointmentResponse], error)
}

// NewPatientAppointmentServiceClient constructs a client for the
// patientappointment.v1.PatientAppointmentService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPatientAppointmentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PatientAppointmentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &patientAppointmentServiceClient{
		listCurrentPatientAppointment: connect.NewClient[v1.ListCurrentPatientAppointmentRequest, v1.ListCurrentPatientAppointmentResponse](
			httpClient,
			baseURL+PatientAppointmentServiceListCurrentPatientAppointmentProcedure,
			connect.WithSchema(patientAppointmentServiceListCurrentPatientAppointmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createPatientAppointment: connect.NewClient[v1.CreatePatientAppointmentRequest, v1.CreatePatientAppointmentResponse](
			httpClient,
			baseURL+PatientAppointmentServiceCreatePatientAppointmentProcedure,
			connect.WithSchema(patientAppointmentServiceCreatePatientAppointmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePatientAppointment: connect.NewClient[v1.UpdatePatientAppointmentRequest, v1.UpdatePatientAppointmentResponse](
			httpClient,
			baseURL+PatientAppointmentServiceUpdatePatientAppointmentProcedure,
			connect.WithSchema(patientAppointmentServiceUpdatePatientAppointmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePatientAppointment: connect.NewClient[v1.DeletePatientAppointmentRequest, v1.DeletePatientAppointmentResponse](
			httpClient,
			baseURL+PatientAppointmentServiceDeletePatientAppointmentProcedure,
			connect.WithSchema(patientAppointmentServiceDeletePatientAppointmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// patientAppointmentServiceClient implements PatientAppointmentServiceClient.
type patientAppointmentServiceClient struct {
	listCurrentPatientAppointment *connect.Client[v1.ListCurrentPatientAppointmentRequest, v1.ListCurrentPatientAppointmentResponse]
	createPatientAppointment      *connect.Client[v1.CreatePatientAppointmentRequest, v1.CreatePatientAppointmentResponse]
	updatePatientAppointment      *connect.Client[v1.UpdatePatientAppointmentRequest, v1.UpdatePatientAppointmentResponse]
	deletePatientAppointment      *connect.Client[v1.DeletePatientAppointmentRequest, v1.DeletePatientAppointmentResponse]
}

// ListCurrentPatientAppointment calls
// patientappointment.v1.PatientAppointmentService.ListCurrentPatientAppointment.
func (c *patientAppointmentServiceClient) ListCurrentPatientAppointment(ctx context.Context, req *connect.Request[v1.ListCurrentPatientAppointmentRequest]) (*connect.Response[v1.ListCurrentPatientAppointmentResponse], error) {
	return c.listCurrentPatientAppointment.CallUnary(ctx, req)
}

// CreatePatientAppointment calls
// patientappointment.v1.PatientAppointmentService.CreatePatientAppointment.
func (c *patientAppointmentServiceClient) CreatePatientAppointment(ctx context.Context, req *connect.Request[v1.CreatePatientAppointmentRequest]) (*connect.Response[v1.CreatePatientAppointmentResponse], error) {
	return c.createPatientAppointment.CallUnary(ctx, req)
}

// UpdatePatientAppointment calls
// patientappointment.v1.PatientAppointmentService.UpdatePatientAppointment.
func (c *patientAppointmentServiceClient) UpdatePatientAppointment(ctx context.Context, req *connect.Request[v1.UpdatePatientAppointmentRequest]) (*connect.Response[v1.UpdatePatientAppointmentResponse], error) {
	return c.updatePatientAppointment.CallUnary(ctx, req)
}

// DeletePatientAppointment calls
// patientappointment.v1.PatientAppointmentService.DeletePatientAppointment.
func (c *patientAppointmentServiceClient) DeletePatientAppointment(ctx context.Context, req *connect.Request[v1.DeletePatientAppointmentRequest]) (*connect.Response[v1.DeletePatientAppointmentResponse], error) {
	return c.deletePatientAppointment.CallUnary(ctx, req)
}

// PatientAppointmentServiceHandler is an implementation of the
// patientappointment.v1.PatientAppointmentService service.
type PatientAppointmentServiceHandler interface {
	ListCurrentPatientAppointment(context.Context, *connect.Request[v1.ListCurrentPatientAppointmentRequest]) (*connect.Response[v1.ListCurrentPatientAppointmentResponse], error)
	// TODO: Allow users to sign up to, or cancel appointments.
	CreatePatientAppointment(context.Context, *connect.Request[v1.CreatePatientAppointmentRequest]) (*connect.Response[v1.CreatePatientAppointmentResponse], error)
	UpdatePatientAppointment(context.Context, *connect.Request[v1.UpdatePatientAppointmentRequest]) (*connect.Response[v1.UpdatePatientAppointmentResponse], error)
	DeletePatientAppointment(context.Context, *connect.Request[v1.DeletePatientAppointmentRequest]) (*connect.Response[v1.DeletePatientAppointmentResponse], error)
}

// NewPatientAppointmentServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPatientAppointmentServiceHandler(svc PatientAppointmentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	patientAppointmentServiceListCurrentPatientAppointmentHandler := connect.NewUnaryHandler(
		PatientAppointmentServiceListCurrentPatientAppointmentProcedure,
		svc.ListCurrentPatientAppointment,
		connect.WithSchema(patientAppointmentServiceListCurrentPatientAppointmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	patientAppointmentServiceCreatePatientAppointmentHandler := connect.NewUnaryHandler(
		PatientAppointmentServiceCreatePatientAppointmentProcedure,
		svc.CreatePatientAppointment,
		connect.WithSchema(patientAppointmentServiceCreatePatientAppointmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	patientAppointmentServiceUpdatePatientAppointmentHandler := connect.NewUnaryHandler(
		PatientAppointmentServiceUpdatePatientAppointmentProcedure,
		svc.UpdatePatientAppointment,
		connect.WithSchema(patientAppointmentServiceUpdatePatientAppointmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	patientAppointmentServiceDeletePatientAppointmentHandler := connect.NewUnaryHandler(
		PatientAppointmentServiceDeletePatientAppointmentProcedure,
		svc.DeletePatientAppointment,
		connect.WithSchema(patientAppointmentServiceDeletePatientAppointmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/patientappointment.v1.PatientAppointmentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PatientAppointmentServiceListCurrentPatientAppointmentProcedure:
			patientAppointmentServiceListCurrentPatientAppointmentHandler.ServeHTTP(w, r)
		case PatientAppointmentServiceCreatePatientAppointmentProcedure:
			patientAppointmentServiceCreatePatientAppointmentHandler.ServeHTTP(w, r)
		case PatientAppointmentServiceUpdatePatientAppointmentProcedure:
			patientAppointmentServiceUpdatePatientAppointmentHandler.ServeHTTP(w, r)
		case PatientAppointmentServiceDeletePatientAppointmentProcedure:
			patientAppointmentServiceDeletePatientAppointmentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPatientAppointmentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPatientAppointmentServiceHandler struct{}

func (UnimplementedPatientAppointmentServiceHandler) ListCurrentPatientAppointment(context.Context, *connect.Request[v1.ListCurrentPatientAppointmentRequest]) (*connect.Response[v1.ListCurrentPatientAppointmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("patientappointment.v1.PatientAppointmentService.ListCurrentPatientAppointment is not implemented"))
}

func (UnimplementedPatientAppointmentServiceHandler) CreatePatientAppointment(context.Context, *connect.Request[v1.CreatePatientAppointmentRequest]) (*connect.Response[v1.CreatePatientAppointmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("patientappointment.v1.PatientAppointmentService.CreatePatientAppointment is not implemented"))
}

func (UnimplementedPatientAppointmentServiceHandler) UpdatePatientAppointment(context.Context, *connect.Request[v1.UpdatePatientAppointmentRequest]) (*connect.Response[v1.UpdatePatientAppointmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("patientappointment.v1.PatientAppointmentService.UpdatePatientAppointment is not implemented"))
}

func (UnimplementedPatientAppointmentServiceHandler) DeletePatientAppointment(context.Context, *connect.Request[v1.DeletePatientAppointmentRequest]) (*connect.Response[v1.DeletePatientAppointmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("patientappointment.v1.PatientAppointmentService.DeletePatientAppointment is not implemented"))
}
