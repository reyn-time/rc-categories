// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/interval/v1/interval.proto

package intervalv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/reyn-time/rc-categories/backend/gen/proto/interval/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IntervalServiceName is the fully-qualified name of the IntervalService service.
	IntervalServiceName = "interval.v1.IntervalService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntervalServicePostIntervalProcedure is the fully-qualified name of the IntervalService's
	// PostInterval RPC.
	IntervalServicePostIntervalProcedure = "/interval.v1.IntervalService/PostInterval"
	// IntervalServiceListIntervalProcedure is the fully-qualified name of the IntervalService's
	// ListInterval RPC.
	IntervalServiceListIntervalProcedure = "/interval.v1.IntervalService/ListInterval"
	// IntervalServiceUpdateIntervalProcedure is the fully-qualified name of the IntervalService's
	// UpdateInterval RPC.
	IntervalServiceUpdateIntervalProcedure = "/interval.v1.IntervalService/UpdateInterval"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	intervalServiceServiceDescriptor              = v1.File_proto_interval_v1_interval_proto.Services().ByName("IntervalService")
	intervalServicePostIntervalMethodDescriptor   = intervalServiceServiceDescriptor.Methods().ByName("PostInterval")
	intervalServiceListIntervalMethodDescriptor   = intervalServiceServiceDescriptor.Methods().ByName("ListInterval")
	intervalServiceUpdateIntervalMethodDescriptor = intervalServiceServiceDescriptor.Methods().ByName("UpdateInterval")
)

// IntervalServiceClient is a client for the interval.v1.IntervalService service.
type IntervalServiceClient interface {
	PostInterval(context.Context, *connect.Request[v1.PostIntervalRequest]) (*connect.Response[v1.PostIntervalResponse], error)
	ListInterval(context.Context, *connect.Request[v1.ListIntervalRequest]) (*connect.Response[v1.ListIntervalResponse], error)
	UpdateInterval(context.Context, *connect.Request[v1.UpdateIntervalRequest]) (*connect.Response[v1.UpdateIntervalResponse], error)
}

// NewIntervalServiceClient constructs a client for the interval.v1.IntervalService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntervalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IntervalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &intervalServiceClient{
		postInterval: connect.NewClient[v1.PostIntervalRequest, v1.PostIntervalResponse](
			httpClient,
			baseURL+IntervalServicePostIntervalProcedure,
			connect.WithSchema(intervalServicePostIntervalMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listInterval: connect.NewClient[v1.ListIntervalRequest, v1.ListIntervalResponse](
			httpClient,
			baseURL+IntervalServiceListIntervalProcedure,
			connect.WithSchema(intervalServiceListIntervalMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateInterval: connect.NewClient[v1.UpdateIntervalRequest, v1.UpdateIntervalResponse](
			httpClient,
			baseURL+IntervalServiceUpdateIntervalProcedure,
			connect.WithSchema(intervalServiceUpdateIntervalMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// intervalServiceClient implements IntervalServiceClient.
type intervalServiceClient struct {
	postInterval   *connect.Client[v1.PostIntervalRequest, v1.PostIntervalResponse]
	listInterval   *connect.Client[v1.ListIntervalRequest, v1.ListIntervalResponse]
	updateInterval *connect.Client[v1.UpdateIntervalRequest, v1.UpdateIntervalResponse]
}

// PostInterval calls interval.v1.IntervalService.PostInterval.
func (c *intervalServiceClient) PostInterval(ctx context.Context, req *connect.Request[v1.PostIntervalRequest]) (*connect.Response[v1.PostIntervalResponse], error) {
	return c.postInterval.CallUnary(ctx, req)
}

// ListInterval calls interval.v1.IntervalService.ListInterval.
func (c *intervalServiceClient) ListInterval(ctx context.Context, req *connect.Request[v1.ListIntervalRequest]) (*connect.Response[v1.ListIntervalResponse], error) {
	return c.listInterval.CallUnary(ctx, req)
}

// UpdateInterval calls interval.v1.IntervalService.UpdateInterval.
func (c *intervalServiceClient) UpdateInterval(ctx context.Context, req *connect.Request[v1.UpdateIntervalRequest]) (*connect.Response[v1.UpdateIntervalResponse], error) {
	return c.updateInterval.CallUnary(ctx, req)
}

// IntervalServiceHandler is an implementation of the interval.v1.IntervalService service.
type IntervalServiceHandler interface {
	PostInterval(context.Context, *connect.Request[v1.PostIntervalRequest]) (*connect.Response[v1.PostIntervalResponse], error)
	ListInterval(context.Context, *connect.Request[v1.ListIntervalRequest]) (*connect.Response[v1.ListIntervalResponse], error)
	UpdateInterval(context.Context, *connect.Request[v1.UpdateIntervalRequest]) (*connect.Response[v1.UpdateIntervalResponse], error)
}

// NewIntervalServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntervalServiceHandler(svc IntervalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	intervalServicePostIntervalHandler := connect.NewUnaryHandler(
		IntervalServicePostIntervalProcedure,
		svc.PostInterval,
		connect.WithSchema(intervalServicePostIntervalMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	intervalServiceListIntervalHandler := connect.NewUnaryHandler(
		IntervalServiceListIntervalProcedure,
		svc.ListInterval,
		connect.WithSchema(intervalServiceListIntervalMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	intervalServiceUpdateIntervalHandler := connect.NewUnaryHandler(
		IntervalServiceUpdateIntervalProcedure,
		svc.UpdateInterval,
		connect.WithSchema(intervalServiceUpdateIntervalMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/interval.v1.IntervalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntervalServicePostIntervalProcedure:
			intervalServicePostIntervalHandler.ServeHTTP(w, r)
		case IntervalServiceListIntervalProcedure:
			intervalServiceListIntervalHandler.ServeHTTP(w, r)
		case IntervalServiceUpdateIntervalProcedure:
			intervalServiceUpdateIntervalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntervalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntervalServiceHandler struct{}

func (UnimplementedIntervalServiceHandler) PostInterval(context.Context, *connect.Request[v1.PostIntervalRequest]) (*connect.Response[v1.PostIntervalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("interval.v1.IntervalService.PostInterval is not implemented"))
}

func (UnimplementedIntervalServiceHandler) ListInterval(context.Context, *connect.Request[v1.ListIntervalRequest]) (*connect.Response[v1.ListIntervalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("interval.v1.IntervalService.ListInterval is not implemented"))
}

func (UnimplementedIntervalServiceHandler) UpdateInterval(context.Context, *connect.Request[v1.UpdateIntervalRequest]) (*connect.Response[v1.UpdateIntervalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("interval.v1.IntervalService.UpdateInterval is not implemented"))
}
