// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/video/v1/video.proto

package videov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/reyn-time/rc-categories/backend/gen/proto/video/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VideoServiceName is the fully-qualified name of the VideoService service.
	VideoServiceName = "video.v1.VideoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VideoServiceListVideoProcedure is the fully-qualified name of the VideoService's ListVideo RPC.
	VideoServiceListVideoProcedure = "/video.v1.VideoService/ListVideo"
	// VideoServiceChangeVideoStatusProcedure is the fully-qualified name of the VideoService's
	// ChangeVideoStatus RPC.
	VideoServiceChangeVideoStatusProcedure = "/video.v1.VideoService/ChangeVideoStatus"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	videoServiceServiceDescriptor                 = v1.File_proto_video_v1_video_proto.Services().ByName("VideoService")
	videoServiceListVideoMethodDescriptor         = videoServiceServiceDescriptor.Methods().ByName("ListVideo")
	videoServiceChangeVideoStatusMethodDescriptor = videoServiceServiceDescriptor.Methods().ByName("ChangeVideoStatus")
)

// VideoServiceClient is a client for the video.v1.VideoService service.
type VideoServiceClient interface {
	ListVideo(context.Context, *connect.Request[v1.ListVideoRequest]) (*connect.Response[v1.ListVideoResponse], error)
	ChangeVideoStatus(context.Context, *connect.Request[v1.ChangeVideoStatusRequest]) (*connect.Response[v1.ChangeVideoStatusResponse], error)
}

// NewVideoServiceClient constructs a client for the video.v1.VideoService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVideoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VideoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &videoServiceClient{
		listVideo: connect.NewClient[v1.ListVideoRequest, v1.ListVideoResponse](
			httpClient,
			baseURL+VideoServiceListVideoProcedure,
			connect.WithSchema(videoServiceListVideoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		changeVideoStatus: connect.NewClient[v1.ChangeVideoStatusRequest, v1.ChangeVideoStatusResponse](
			httpClient,
			baseURL+VideoServiceChangeVideoStatusProcedure,
			connect.WithSchema(videoServiceChangeVideoStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// videoServiceClient implements VideoServiceClient.
type videoServiceClient struct {
	listVideo         *connect.Client[v1.ListVideoRequest, v1.ListVideoResponse]
	changeVideoStatus *connect.Client[v1.ChangeVideoStatusRequest, v1.ChangeVideoStatusResponse]
}

// ListVideo calls video.v1.VideoService.ListVideo.
func (c *videoServiceClient) ListVideo(ctx context.Context, req *connect.Request[v1.ListVideoRequest]) (*connect.Response[v1.ListVideoResponse], error) {
	return c.listVideo.CallUnary(ctx, req)
}

// ChangeVideoStatus calls video.v1.VideoService.ChangeVideoStatus.
func (c *videoServiceClient) ChangeVideoStatus(ctx context.Context, req *connect.Request[v1.ChangeVideoStatusRequest]) (*connect.Response[v1.ChangeVideoStatusResponse], error) {
	return c.changeVideoStatus.CallUnary(ctx, req)
}

// VideoServiceHandler is an implementation of the video.v1.VideoService service.
type VideoServiceHandler interface {
	ListVideo(context.Context, *connect.Request[v1.ListVideoRequest]) (*connect.Response[v1.ListVideoResponse], error)
	ChangeVideoStatus(context.Context, *connect.Request[v1.ChangeVideoStatusRequest]) (*connect.Response[v1.ChangeVideoStatusResponse], error)
}

// NewVideoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVideoServiceHandler(svc VideoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	videoServiceListVideoHandler := connect.NewUnaryHandler(
		VideoServiceListVideoProcedure,
		svc.ListVideo,
		connect.WithSchema(videoServiceListVideoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	videoServiceChangeVideoStatusHandler := connect.NewUnaryHandler(
		VideoServiceChangeVideoStatusProcedure,
		svc.ChangeVideoStatus,
		connect.WithSchema(videoServiceChangeVideoStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/video.v1.VideoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VideoServiceListVideoProcedure:
			videoServiceListVideoHandler.ServeHTTP(w, r)
		case VideoServiceChangeVideoStatusProcedure:
			videoServiceChangeVideoStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVideoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVideoServiceHandler struct{}

func (UnimplementedVideoServiceHandler) ListVideo(context.Context, *connect.Request[v1.ListVideoRequest]) (*connect.Response[v1.ListVideoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("video.v1.VideoService.ListVideo is not implemented"))
}

func (UnimplementedVideoServiceHandler) ChangeVideoStatus(context.Context, *connect.Request[v1.ChangeVideoStatusRequest]) (*connect.Response[v1.ChangeVideoStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("video.v1.VideoService.ChangeVideoStatus is not implemented"))
}
